
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──
✔ broom        1.0.7     ✔ recipes      1.1.0
✔ dials        1.3.0     ✔ rsample      1.2.1
✔ dplyr        1.1.4     ✔ tibble       3.2.1
✔ ggplot2      3.5.1     ✔ tidyr        1.3.1
✔ infer        1.0.7     ✔ tune         1.2.1
✔ modeldata    1.4.0     ✔ workflows    1.1.4
✔ parsnip      1.2.1     ✔ workflowsets 1.1.0
✔ purrr        1.0.2     ✔ yardstick    1.3.1
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ purrr::discard() masks scales::discard()
✖ dplyr::filter()  masks stats::filter()
✖ dplyr::lag()     masks stats::lag()
✖ recipes::step()  masks stats::step()
• Search for functions across packages at https://www.tidymodels.org/find/
> library(embed)
> library(vroom)

Attaching package: ‘vroom’

The following object is masked from ‘package:yardstick’:

    spec

The following object is masked from ‘package:scales’:

    col_factor

> 
> test <- vroom('test.csv')
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> train <- vroom('train.csv')
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> train$ACTION <- factor(train$ACTION)
> 
> my_recipe <- recipe(ACTION ~., data=train) |>
+   step_mutate_at(all_numeric(), fn = factor) |>
+   step_other(all_nominal_predictors(), threshold = .01) |> 
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) |>
+   step_normalize(all_nominal_predictors())
> 
> 
> prep <- prep(my_recipe)
boundary (singular) fit: see help('isSingular')
> baked <- bake(prep, new_data = train)
> 
> 
> ## Logistic Regression
> log_reg_mod <- logistic_reg() |>
+   set_engine('glm')
> 
> workflow_log <- workflow() |>
+   add_recipe(my_recipe) |>
+   add_model(log_reg_mod) |>
+   fit(data = train)
boundary (singular) fit: see help('isSingular')
> 
> log_reg_pred <- predict(workflow_log, new_data = test, type = 'prob')
> 
> preds_logistic <- log_reg_pred |>
+   bind_cols(test) |>
+   rename(ACTION = .pred_1) |>
+   select(id, ACTION)
> 
> vroom_write(x=preds_logistic, file = "./LogisticPreds.csv", delim=",")
> 
> ## Penalized Regression
> pen_mod <- logistic_reg(mixture = tune(), penalty = tune()) |>
+   set_engine('glmnet')
> 
> pen_workflow <- workflow() |>
+   add_recipe(my_recipe) |>
+   add_model(pen_mod)
> 
> tuning_grid <- grid_regular(penalty(),
+                             mixture(),
+                             levels = 5)
> 
> folds <- vfold_cv(train, v = 5, repeats = 1)
> 
> CV_results <- pen_workflow |>
+   tune_grid(resamples = folds,
+             grid = tuning_grid,
+             metrics = metric_set(roc_auc))
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
> 
> best <- CV_results |>
+   select_best()
Warning message:
In select_best(CV_results) :
  No value of `metric` was given; "roc_auc" will be used.
> 
> final_wf_pen <- pen_workflow |>
+   finalize_workflow(best) |>
+   fit(data = train)
boundary (singular) fit: see help('isSingular')
> 
> pen_pred <- final_wf_pen |> predict(new_data = test, type = 'prob')
> 
> preds_penalized <- pen_pred |>
+   bind_cols(test) |>
+   rename(ACTION = .pred_1) |>
+   select(id, ACTION)
> 
> vroom_write(x=preds_penalized, file = "./PenalizedLogisticPreds.csv", delim=",")
> 
> 
> proc.time()
   user  system elapsed 
101.024   1.556 102.395 
